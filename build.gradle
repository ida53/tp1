apply plugin : 'java'
apply plugin : 'eclipse'
apply plugin : 'pmd'
apply plugin : 'findbugs'
apply plugin : 'checkstyle'
apply plugin : 'jacoco'
apply plugin : 'jdepend'

// Le repertoire pour aller chercher le joda-time
repositories {
	jcenter()
	mavenCentral()
	/**maven{
		url "https://plugins.gradle.org/m2/"
		name 'Gragle'
	}*/
}

def gradleExtra="${project.rootDir}/gradle/script"
def reportDir="${project.buildDir}/reports"

check.dependsOn 'cpd'


// joda-time pour la gestion des datetime et junit
// On fait ensuite "gradlew.bat eclipe" en ligne de commande pour l'intéger dans
// le projet
dependencies {
	compile 'joda-time:joda-time:2.10'
	testCompile("junit:junit:4.12")
}

pmd{
    pmdTest.enabled = false
    ruleSets = ["java-basic",
                "java-braces",
                "java-clone",
                "java-codesize",
                "java-comments",
                "java-controversial",
                "java-coupling",
                "java-design",
                "java-empty",
                "java-finalizers",
                "java-imports",
                "java-naming",
                "java-optimizations",
                "java-strings",
                "java-unusedcode"]
                
                ignoreFailures = true
                
}

// PMD
tasks.withType(Pmd){
    reports{
        xml.enabled true
        html.enabled true
    }
}

test {
    ignoreFailures = true
}

// findbugs
findbugs{
    findbugsTest.enabled = false
    ignoreFailures = true
                
}

tasks.withType(FindBugs){
    reports{
        xml.enabled true
        html.enabled false
    
    }
}

// checkstyle
checkstyle{    
    toolVersion = '8.10.1'
    ignoreFailures = true
    showViolations = true
    configFile rootProject.file('config/checkstyle/checkstyle.xml')
                
}

tasks.withType(Checkstyle){
    reports{
        xml.enabled false
        html.enabled true
        
    }
}

// CPD
task cpd {
    doLast {
        def cpdOutputDir = new File("${reportDir}/cpd")
        cpdOutputDir.mkdirs()

        ant.taskdef(name: 'cpd', classname: 'net.sourceforge.pmd.cpd.CPDTask', classpath: configurations.pmd.asPath)

        ant.cpd(minimumTokenCount: '5', format: 'xml', outputFile: new File(cpdOutputDir, 'cpd.xml')) {
            fileset(dir: 'src') {
                include(name: '**/*.java')
            }
        }
    }
}

// Jacoco
jacoco {
    toolVersion = "0.8.1"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false        
    }
}

// JDepend
jdepend {
    jdependTest.enabled = false
//   toolVersion = "2.9.1"
    ignoreFailures = true
}

tasks.withType(JDepend) {
    reports {
        xml.enabled true
        text.enabled false
    }
}